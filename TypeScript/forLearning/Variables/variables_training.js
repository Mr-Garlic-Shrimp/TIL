// =============== 代入 =================
var num = 123;
// num = 100; 再代入は不可
var num_let = 100;
num_let = 200; // 再代入可能
// =============== 型推論 =================
var x = 1; // 自動的にnumber型になる
//x = "hello" -> 文字列を代入しようとするとエラー
// Pythonのような動的型付けとの違いはいつ型が決まるのかである。
// Pythonは実行時に型が決まり、TypeScriptの型推論はコンパイル時に型が決まる。
// =============== プリミティブ型の種類 =================
// 様々なデータ型の基礎となっている型をプリミティブ型という。
// プリミティブ型には下記がある。下記以外はオブジェクト型の括りとなる。
// boolean型(論理型): trueまたはfalseの真偽値。
// number型(数値型): 0や0.1のような数値。整数も小数も含む。
// string型(文字列型): "Hello World"のような文字列。
// undefined型: 値が未定義であることを表す型。
// null型: 値がないことを表す型。
// symbol型(シンボル型): 一意で不変の値。
// bigint型(長整数型): 9007199254740992nのようなnumber型では扱えない大きな整数型
// =============== number型 =================
// 可読性のために区切り文字‗を使って値を代入できる
x = 100000000; // -> 100,000,000として解釈される。
// console.log(x)
// 数値リテラルのプロパティ参照はドットを二つ繋げる（一つだと小数点と被るため）
//console.log(5..toString())
// NaN(Not a Number)
var price = parseInt("百円"); //文字列をintにしようとしてNaNになる。
//console.log(price)
// NaNは等号比較で常にfalseになる
//console.log(NaN == NaN); -> 常にFalse。警告されるが、コンパイルは通る。
// =============== String型 =================
console.log("=============== string型 =================");
// ダブルクォート入りの文字列を表現する場合、ダブルクォートの前に\でエスケープする必要あり。
var str = "He said \"madam, I'm Adam.\"";
// バッククォートで囲んだ場合、テンプレートリテラルが使用可能。
// 文字列の途中で改行と式の挿入が可能になる。
var count = 10;
console.log("\u73FE\u5728\u3001\n    ".concat(count, "\u540D\u304C\u898B\u3066\u3044\u307E\u3059\u3002\n"));
// 数式も可能。PythonのFstringみたいな感じ
console.log("\n    \u7A0E\u8FBC\u307F".concat(Math.floor(100 * 1.1), "\u5186\n"));
// 文字列結合。Pythonと同じ
console.log("ID" + "_" + "001");
// =============== undefined型 =================
console.log("=============== undefined型 =================");
// undefinedは未定義を表すプリミティブな値を表す。
// 変数に値がセットされていないとき、戻り値が無い関数、オブジェクトに存在しないプロパティに
// アクセスしたとき、配列に存在しないインデックスでアクセスしたときなどに現れる
var Name;
console.log(Name);
function func() { }
console.log(func());
undefined;
var arr = [];
console.log(arr[1]);
undefined;
// =============== literal型 =================
// 1,2,3しか代入できない変数
var X;
//X = 1 -> OK
//X = 100 -> エラー
