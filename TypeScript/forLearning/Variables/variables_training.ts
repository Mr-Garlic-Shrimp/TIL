
// =============== 代入 =================
const num: number = 123;
// num = 100; 再代入は不可

let num_let: number = 100;
num_let = 200; // 再代入可能



// =============== 型推論 =================
let x = 1; // 自動的にnumber型になる
//x = "hello" -> 文字列を代入しようとするとエラー

// Pythonのような動的型付けとの違いはいつ型が決まるのかである。
// Pythonは実行時に型が決まり、TypeScriptの型推論はコンパイル時に型が決まる。


// =============== プリミティブ型の種類 =================

// 様々なデータ型の基礎となっている型をプリミティブ型という。
// プリミティブ型には下記がある。下記以外はオブジェクト型の括りとなる。
// boolean型(論理型): trueまたはfalseの真偽値。
// number型(数値型): 0や0.1のような数値。整数も小数も含む。
// string型(文字列型): "Hello World"のような文字列。
// undefined型: 値が未定義であることを表す型。
// null型: 値がないことを表す型。
// symbol型(シンボル型): 一意で不変の値。
// bigint型(長整数型): 9007199254740992nのようなnumber型では扱えない大きな整数型



// =============== number型 =================

// 可読性のために区切り文字‗を使って値を代入できる
x = 100_000_000 // -> 100,000,000として解釈される。
// console.log(x)


// 数値リテラルのプロパティ参照はドットを二つ繋げる（一つだと小数点と被るため）
//console.log(5..toString())

// NaN(Not a Number)
const price = parseInt("百円"); //文字列をintにしようとしてNaNになる。
//console.log(price)

// NaNは等号比較で常にfalseになる
//console.log(NaN == NaN); -> 常にFalse。警告されるが、コンパイルは通る。





